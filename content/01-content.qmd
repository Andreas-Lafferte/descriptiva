---
title: "Práctica 1. Introducción al lenguaje R"
date: "2023-04-13"
lang: es
output:
  number_sections: true
---

# Presentación

## 0. Objetivo de la práctica

El objetivo de esta guía práctica es introducirnos en los procedimientos básicos del uso del lenguaje y ambiente R, así como conocer las herramientas que permiten establecer un flujo de trabajo en R.

En detalle, aprenderemos:

1. Cómo establecer un flujo de trabajo mediante **scripts** y **Rprojects** siguiendo el protocolo [IPO](https://lisa-coes.com/ipo-data/)

2.  R como calculadora

3.  Lenguaje orientado a objetos

4.  Usando funciones

5.  Tipos de datos

## 1. Flujo de trabajo en R

## 2. Conocimientos básicos de programación 

Revisemos algunos conocimientos básicos para la programación en R. Pero antes, tengamos dos cosas en mente: 

- Primero, ¿qué es codificar?, en programación **codificar corresponde a un proceso de entrega de instrucciones** en un lenguaje específico, siguiendo un orden lógico y coherente. 

- Segundo, de aquí en adelante nos manejaremos con una máxima en el curso; **_existe un acuerdo implícito entre tú y R_: R hará todos los cálculos por ti, pero en cambio _tú_ debes dar las instrucciones con total precisión.**

### 2.1 R como calculadora

Uno de los usos más sencillos y que están a la base R, es usarlo como una calculadora. 

```{r, collapse=TRUE}
5+5

25/5

2*2

27-2

```

Como podrás ver, el resultado de estas instrucciones aparecen como un `[1]` en la consola. También podemos hacer operatorias más complejas y con más cálculos. 

```{r, collapse=TRUE}
12*(7+2)+(45-32)+8

22^2 - 2^2

1/200 * 30
```


### 2.2 Un lenguaje orientado a objetos

R es un lenguaje de programación orientado a objetos. ¿Qué significa eso?, implica que podemos crear elementos dentro del ambiente de R, a los cuales les **asignaremos información** que quedará almacenada, información que puede ir desde números, palabras, cálculos hasta grandes bases de datos. 

Todas las instrucciones en R en las que crees objetos, es decir, instrucciones de **asignación**, tendrán la misma estructura:

`nombre_objeto <- valor`

El asignador `<-` se utiliza para crear objetos y forma parte de uno de los **operadores** usados en R. 

Los elementos que podemos asignar a objetos son múltiples, como números, palabras acompañadas siempre de corchetes `" "` y vectores que corresponden a un conjunto o secuencia de elementos del mismo tipo definidos por la funcion de concatenar = `c()`.

Veamos un ejemplo creando objetos:

```{r, collapse=TRUE}
x <- 4 # asignar

x # ejecutar

y <- "Hola mundo" # los carácteres alfabéticos siempre van acompañados de corchetes

y 

```


¿Y concatenando? Hacemos un vector.

```{r, collapse=TRUE}
edad <- c(18,22,36,19,35) # concatenar (variable de razon)

edad

genero <- c(3,1,1,2,3) # masculino = 1; femenino = 2; transgenero = 3 (variable nominal)

genero 

gse <- c("ABC1", "C2", "E", "AbC1", "E")  # tambíen se pueden usar carácteres (variable ordinal)

gse
```



**¡Hagamos una pequeño reto!**: ¿Cuál es el valor de a y b? Si a <- 5; b <- a; a <- 4

```{r, collapse=TRUE}

a <- 5
b <- a
a <- 4

print(a) # imprimir en la consola

print(b)

a + 10
```

Ahora, sea z = a^2 ¿qué resultado obtenemos de a * b + z?

```{r, collapse=TRUE}
z <- a^2 # asignar

a * b + z
```


Además de lo anterior, en R es fundamental la creación de **data.frames**. Un Data.frame es una estructura de datos de dos dimensiones (columnas y filas), donde las columnas pueden ser de diferente naturaleza, pero deben tener el mismo largo. A partir de ella agrupamos variables en una matriz, o sea, construimos una base de datos. Es como "pegar" las columnas (variables) una al lado de otra. 

Creemos un data.frame con los vectores que ya creamos antes. 

```{r, collapse=TRUE}
base1 <- data.frame(genero, gse, edad) # Resulta como objeto de "datos" en
                                       # entorno.

base1

```

Como puedes ver, para crear el data.frame usamos la función que lleva el mismo nombre, colocando dentro del paréntesis `data.frame()` los vectores que creamos anteriormente. 

Ahora, creemos un `data.frame()` desce cero. En este ejemplo, crearemos los vectores dentro de la función `data.frame()`.

```{r, collapse=TRUE}
# Ejemplo de como crear un data.frame desde 0: 

base2 <- data.frame(Sexo=c("H","M","H","M","H","M"),
                    Estatura=c(1.83,1.76,1.82,1.60,1.90,1.66),
                    Peso=c(67,58,66,48,75,55))

head(base2)  # Me permite visualizar las primeras filas

```

### 2.3 Operadores en R

Antes de trabajar con datos, debemos conocer el concepto de **operadores**. Estos símbolos no son de uso exclusivo en R, pero no todos tienen el mismo significado que en otros softwares.

Los operadores son símbolos que permiten, en los distintos procedimientos de procesamiento, simplificar procesos. Por ejemplo, serán útilizados cuando filtremos nuestros datos para personas de ciertas categorías, cuando calculemos variables nuevas (de manera aritmética o condicional) o, simplemente, cuando queramos hacer procesos “concatenados”.


![](../images/operadores.png)

¡Veamos algunos ejemplos!

```{r, collapse=TRUE}
20 == 5 # igualdad

30 >= 14 # mayor o igual que

22 <= 2 # menor o igual que

25 != 10 # no es igual a

p = 10; y = 5; p <= y # operatoria en objetos

```


### 2.4 Usando funciones

R tiene una gran colección de funciones, las cuales van desde procedimientos muy simples hasta modelos o algoritmos complejos. 

Algunas de las funciones básicas para el uso de R son aquellas para cálculos aritméticos, las secuencias y repeteciones, y los mínimos y máximos. 

- Aritméticas

```{r, collapse=TRUE}
20 * log(25)

2 + 4 * exp(3)

sqrt(2) + 100

```

- Secuencias

```{r, collapse=TRUE}
1:3

seq(from = 1, to = 3)

seq(1:3)

seq(from = 1, to = 100, by = 2)

```

- Repeticiones 

```{r, collapse=TRUE}
rep(1:3, times = 2) # la función rep permite repetir una secuencia determinanda cantidad de veces (times) 

rep(1:3, each = 2) # también podemos indicarles cuantas veces quiero que se repita una secuencia

rep(1:3, times = c(2,2,2))

```


## 3. Tipos de datos

### 3.1 ¿Qué son los tipos de datos?

En R, al igual que en la mayoría de lenguajes de programación, contamos con datos de diversos tipos, en razón de los cuales podemos realizar determiandos procedimientos de tratamiento o análisis. 

**Los tipos de datos están íntimamente relacionados con el nivel de medición de las variables** a las que corresponden. Como viste en clases, la teoría de los niveles de medición contempla cuatro tipos: 

![](../images/noir2.jpg)

### 3.2 ¿Qué tipos de datos encontramos en R?

```{r, eval=TRUE}



```





