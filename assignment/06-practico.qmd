---
title: "Práctica 6. Visualización de datos con R"
date: "2023-06-01"
lang: es
output:
  number_sections: true
---

# Presentación

## Objetivo de la práctica

El objetivo de esta guía práctica es aplicar los conocimientos aprendidos en clases sobre la forma de una distribución en R, comprendiendo sus usos, relevancia y formas de analizarla. También veremos visualización de datos con R, considerando las mejores prácticas para comunicar datos y análisis en ciencias sociales.


1. La noción de una distribución y sus tipos (continuas y discretas)

2. Estimar e interpretar la asimetría y curtosis de una distribución

3. Contrastar distribuciones empíricas con teóricas

4. Qué es la visualización de datos y cómo comunicarlos a una audiencia de manera eficiente, completa e insesgada.

5. Visualizar datos univariados con `{ggplot2}`.


## Recursos de la práctica

En esta práctica trabajaremos con la base de datos de la Encuesta de Opinión Pública (CEP) de Diciembre del 2019 realizada por el [Centro de Estudios Públicos](https://www.cepchile.cl/). Esta base la pueden encontrar en el canal de U-Cursos sección Material Docente, o bien, en el siguiente enlace [{{< fa table >}} `CEP 2019`](https://github.com/Andreas-Lafferte/descriptiva/raw/main/content/Input/data/CEP_dic2019.sav) podrán descargar el archivo que contiene la base CEP Diciembre 2019.

# Preparación de datos

## 1. Cargar librerías

Para esta sesión, usaremos librerías que ya conocemos en prácticos pasados:

```{r echo=TRUE}
pacman::p_load(tidyverse, # colección de paquetes para manipulación de datos
               haven, # para importar datos
               car,# para recodificar datos
               psych, # para analizar datos
               sjmisc) # para analizar datos

options(scipen = 999) # para desactivar notacion cientifica
rm(list = ls()) # para limpiar el entorno de trabajo
              
```

## 2. Importar datos

Cargamos la base de datos CEP Diciembre 2019 mediante el paquete `haven` 

```{r eval=TRUE, include=TRUE, collapse=FALSE}
cep <- haven::read_sav("Input/data/CEP_dic2019.sav")

```

## 3. Limpiar datos

Seleccionamos las variables de interés y las renombramos:

```{r eval=TRUE, include=TRUE, collapse=FALSE}

proc_cep <- cep %>% 
  select(edad = DS_P2_EXACTA,
         sexo = DS_P1,
         empleo = DS_P5, 
         satisfaccion = SV_1)
  
```


Recodificamos las variables `satisfaccion`, `sexo` y `empleo`. Ademas, transformamos la variable `edad` a tramos:

```{r eval=TRUE, include=TRUE, collapse=FALSE}

proc_cep$sexo <- as.factor(proc_cep$sexo) # primero pasamos a factor la variable al venir con etiquetas
proc_cep$empleo <- as.factor(proc_cep$empleo)

proc_cep <- proc_cep %>% 
  mutate(satisfaccion=car::recode(satisfaccion, recodes = c("88 = NA; 99 = NA")),
         sexo = car::recode(sexo, recodes = c("1 = 'Hombre'; 2 = 'Mujer'")),
         empleo = car::recode(empleo, recodes = c("1 = 'Ocupado'; 2 = 'Desocupado'; 3 = 'Nunca ha trabajado'; 99 = NA")),
         tramo_edad = case_when(edad <= 29 ~ "Jovenes",
                                edad >= 30 & edad <= 59 ~ "Adultos",
                                edad >= 60 ~ "Adutos mayores")) 


```


Removemos los valores perdidos o missing. 

```{r eval=TRUE, include=TRUE, collapse=FALSE}
proc_cep <- na.omit(proc_cep)
```


Por último, guardamos la base procesada. 

```{r eval=TRUE, include=TRUE, collapse=FALSE}

saveRDS(proc_cep, file = "Output/proc_cep.RData")
```

# Análisis de la forma de distribución

Antes de visualizar los datos, es crucial analizar la forma de la distribución de nuestras variables. En este ejemplo tenemos:

- una nominal,
- una de razón,
- una ordinal de 10 categorías. 

::: callout-note

**Distribución**

Recordemos que por distribución nos referimos al ordenamiento de las categorías de respuesta o posibles valores de una variable y su frecuencia de ocurrencia.
:::


```{r eval=TRUE, include=TRUE, collapse=FALSE}

sjmisc::frq(proc_cep$empleo)

psych::describe(proc_cep$satisfaccion,
                quant = c(.25,.75),
                IQR = TRUE)


```

Analicemos e interpretemos la forma de la distribución de nuestras variables. En este ejemplo tenemos:

- una de razón,
- una ordinal de 10 categorías. 


```{r eval=TRUE, include=TRUE, collapse=FALSE}

psych::describe(proc_cep$edad)

ggplot(data = proc_cep, 
       mapping = aes(x = edad)) + 
  geom_density(color = "black", fill = "#FA8072", alpha = 0.8)  + 
  labs(title ="Diagrama densidad: Edad", 
       x = "Edad", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") 

```

A partir de los estadísticos entregados, sabemos que la variable `edad` tiene una asimetría positiva (skew = 0.14) pero baja (< 0.5), lo cual indica que los datos se tienden a distribuir hacía los menores valores del eje X. Por su parte, la curtosis es negativa (kurtosis = -0.93) o platicúrtica, lo cual indica que existe una baja concentración en el centro de los datos. 



```{r eval=TRUE, include=TRUE, collapse=FALSE}

psych::describe(proc_cep$satisfaccion)

ggplot(data = proc_cep, 
       mapping = aes(x = satisfaccion)) + 
  geom_density(color = "black", fill = "darkred", alpha = 0.8)  + 
  labs(title ="Histograma densidad: Satisfaccion", 
       x = "Satisfaccion", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") 
```

En cuanto a la variable `satisfaccion`, tenemos una asimetría negativa (skew = -0.32) aunque baja, indicando que los datos se tienden a distribuir hacia la parte superior de la variable. Además, la curtosis también es negativa o platicúrtica (kurtosis = -0.45), por lo que existe una baja concentración en el centro de los datos. 

# Distribuciones empíricas y teóricas

Como vimos en clases, **una distribución empírica (u observada) es la distribución de los valores que asume la variable** en un grupo concreto a partir de una observación. 

Mientras que, por su parte, **una distribución teórica es función matématica** que expresan la distribución de un conjunto de números mediante su probabilidad de ocurencia. En palabras sencillas, es una función de densidad que permite asignar probabilidades de ocurrencia a los resultados. 


::: callout-tip

**Variable aleatoria**

En las distribuciones teóricas, a veces nos vamos a encontrar con el concepto de _variable aleatoria_. ¿Qué es? En probabilidad y estadística, una variable aleatoria es una variable cuyos valores posibles son resultados numéricos de un fenómeno aleatorio. 

:::


**Cuando una distribución empírica se asejema a una teórica, podemos aplicarle a la primera las propiedades de la última. Así, nos permiten hacer inferencia estadística y conocer una serie de características de la población. **

Una de las distribuciones teóricas más utilizada es la normal o Gaussiana, la cual es una herramienta potente y ampliamente utilizada en estadística y probabilidad, debido a sus numerosas propiedades útiles y a sus aplicaciones prácticas en un gran número de campos y contextos.


**Contrastemos ahora la distribución empírica de nuestras variables con la distribución normal**



```{r eval=TRUE, include=TRUE, collapse=FALSE}

ggplot(proc_cep, aes(edad)) + 
  geom_histogram(aes(x = edad, y = ..density..), bins = 50, color = "black", fill = "grey") +
  geom_density(color = "blue")

ggplot(proc_cep, aes(edad)) + 
  geom_histogram(aes(x = edad, y = ..density..), bins = 50, color = "black", fill = "grey") +
  geom_density(color = "blue")+
  stat_function(fun = dnorm, args = list(mean = mean(proc_cep$edad), sd = sd(proc_cep$edad)))
```

En la primera figura vemos la distribución empírica de la variable `edad` (histograma y densidad). En la segunda, agregamos la curva normal (o distribución), y obtenemos una evaluación gráfica de qué tan bien nuestros datos se ajustan a esta distribución teórica. 


# ¿Qué es visualizar datos?

La visualización de datos consiste en dar sentido a filas y columnas de datos, presentándolos en un formato fácilmente comprensible a una audiencia. 

![](../images/visual1.png)

Visualizar datos es una de las tareas más recurrentes en estadística, al mismo tiempo que es una de las formas más delicadas de comunicar información. ¿A qué nos referimos? básicamente a que, como investigadores/as, comunicamos nuestros resultados buscando resaltar un aspecto de la realidad e intentando crear un mensaje con los datos. Por ello, **es sumamente importante** hacerlo de forma fidedigna, sencilla y pensando siempre en cómo la audiencia podría interpretarlo. 

![](../images/visual2.png)

### Cómo NO visualizar datos

Es bastante común ver malas formas de comunicar datos; en los medios de comunicación, redes sociales e inclusive en la misma investigación acádemica. Esto ocurre por diversos motivos, ya sea por elementos gráficos, de escalas o de orden que engañan al ojo y percepción humana. Algunos ejemplos de cómo **no** se deben comunicar datos son: 

```{r echo=FALSE, warning=FALSE, out.width="60%", fig.align='left'}
knitr::include_graphics("../images/pinera.png", error = FALSE)
```


```{r echo=FALSE, warning=FALSE, out.width="60%", fig.align='right'}
knitr::include_graphics("../images/tercera.jpeg", error = FALSE)
```

### Algunos principios para visualizar datos

¿Y entonces **cómo realizar una buena/correcta visualización de datos**? Tengamos como premisa la siguiente cita:

_"La excelencia gráfica es la presentación bien diseñada de datos interesantes: una cuestión de sustancia, de estadística y de diseño... [Consiste] en ideas complejas comunicadas con claridad, precisión y eficacia. ... [Es] lo que da al espectador el mayor número de ideas en el menor tiempo con la menor tinta en el menor espacio ... [Es] casi siempre multivariante ... Y la excelencia gráfica requiere decir la verdad sobre los datos"._ 

_Edward Tufte, The Visual Display of Quantitative Information, p. 51_


:::::: {.row .d-flex .justify-content-center}
::::: {.col-md-6} 
:::: {.card .bg-danger .text-white}
::: {.card-body}

**10 Principios para la visualización de datos**

1. Conoce a tu audiencia ¿Qué preguntas necesitan respuesta?

2. Utiliza el tipo de gráfico adecuado para representar el tipo de información que dispone.

3. La forma sigue a la función. Concéntrate en cómo va a utilizar los datos tu público y deja que eso determine el estilo de presentación.

4.  Proporcione el contexto necesario para que los datos se interpreten y se actúe en consecuencia.

5. Mantenga la sencillez. Elimine la información no esencial.

6. Resalte la información más importante 

7. Utilice los colores con prudencia

8. Utilice cuidadosamente las proporciones para que las diferencias de tamaño en el diseño representen fielmente las diferencias de valor.

9. Sé escéptico. Pregúntese qué datos no están representados y qué información podría, por tanto, malinterpretarse o perderse.

10. Muestra la verdad de tus datos, no lo que quisieras creer.

:::
::::
:::::
::::::

# Visualización de datos con `ggplot2`

Una vez que conocemos cómo es la distribución de nuestras variables, procedemos a graficarlas considerando los principios para una buena visualizacion de datos. 

Pero antes, debemos conocer qué es `ggplot2` y cúal es su lógica. 

```{r echo=FALSE, warning=FALSE, out.width="50%", fig.align='left'}
knitr::include_graphics("../images/gg.png", error = FALSE)
```

`Ggplot2` es un potente paquete para visualizar datos en R. **Funciona por capas**, comenzando desde lo más central o nuclear hasta llegar a los detalles más estéticos necesarios. 

1. La **primera capa corresponde a los datos**, es decir, las variables que queremos graficar ya listas y procesadas.
2. La **segunda corresponde** al "mapping", que es básicamente determinar **cuáles variables serán el eje X e Y**, si existen grupos u otros. 
3. La **tercera es la geometría**, la cual se refiere a la **forma** que tendrá el gráfico (líneas, barras, puntos, boxplot, violinplot, etc.). 


**¡COMENCEMOS!**

### 1. Diagrama de barras

La forma más común de presentar variables nominales es mediante un gráfico de barras.

En este primer ejemplo iremos capa por capa (o paso por paso), para entender la logica de `ggplot2`, en los siguientes lo haremos en conjunto.

```{r eval=TRUE, include=TRUE, warning=FALSE, collapse=FALSE}

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) # especificamos datos y mapping 

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) + # especificamos datos y mapping 
  geom_bar() # agregamos geometria o forma 

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) + # especificamos datos y mapping 
  geom_bar(color = "black", fill = "darkblue") # agregamos geometria y color y relleno

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) + # especificamos datos y mapping 
  geom_bar(color = "black", fill = "darkblue") + # agregamos geometria y color y relleno
  scale_y_continuous(limits = c(0,1000)) # agregamos escala en eje Y y ponemos limites minimos y maximos

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) + # especificamos datos y mapping 
  geom_bar(color = "black", fill = "darkblue") + # agregamos geometria y color y relleno
  scale_y_continuous(limits = c(0,1000)) +# agregamos escala en eje Y y ponemos limites minimos y maximos
  labs(title ="Condición de empleo 2019", 
       x = "Situación empleo", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente

ggplot(data = proc_cep, 
       mapping = aes(x = empleo)) + # especificamos datos y mapping 
  geom_bar(color = "black", fill = "darkblue") + # agregamos geometria y color y relleno
  scale_y_continuous(limits = c(0,1000)) +# agregamos escala en eje Y y ponemos limites minimos y maximos
  labs(title ="Condición de empleo 2019", 
       x = "Situación empleo", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") +# agregamos titulo, nombres a los ejes y fuente
  geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "white") # agregamos las freq de cada barra



```

¿Y podemos diferenciar por sexo en este mismo gráfico? **Claro que sí**, debemos indicar la variable que agrupa en el mapping o coordenadas mediante el argumento _fill_.

```{r eval=TRUE, warning=FALSE, include=TRUE}

ggplot(data = proc_cep, 
       mapping = aes(x = empleo, fill = sexo)) + # especificamos datos y mapping 
  geom_bar() + # agregamos geometria 
  scale_y_continuous(limits = c(0,1000)) +# agregamos escala en eje Y y ponemos limites minimos y maximos
  labs(title ="Condición de empleo, segun sexo 2019", 
       x = "Situación empleo", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") +# agregamos titulo, nombres a los ejes y fuente
  geom_text(aes(label = ..count..), stat = "count", colour = "white", position = position_stack(.1)) # agregams freq de cada barra por grupo


```

Ahora tenemos un gráfico de barras apiladas según el sexo de los entrevistados, y dicha agrupación nos aparece como una leyenda en la parte izquierda del grafico con el nombre de los grupos. 

¿Y si en vez de que sea apilado, quiero que las barras por sexo estén una al lado de la otra? Fácil, debemos especifícarlo dentro de la geometría.

```{r eval=TRUE, warning=FALSE, include=TRUE}

ggplot(data = proc_cep, 
       mapping = aes(x = empleo, fill = sexo)) + # especificamos datos y mapping 
  geom_bar(position = "dodge2") + # agregamos geometria y especificamos posicion 
  labs(title ="Condición de empleo, segun sexo 2019", 
       x = "Situación empleo", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") +# agregamos titulo, nombres a los ejes y fuente
  geom_text(aes(label = ..count..), stat = "count", colour = "white", 
    vjust = 1.5, position = position_dodge(.9)) # agregamos freq de cada barra por grupo
```

```{r eval=TRUE, warning=FALSE, include=TRUE}

ggplot(data = proc_cep, 
       mapping = aes(x = empleo, fill = tramo_edad)) + # especificamos datos y mapping 
  geom_bar(position = "dodge2") + # agregamos geometria y especificamos posicion 
  labs(title ="Condición de empleo, segun tramo etario 2019", 
       x = "Situación empleo", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") +# agregamos titulo, nombres a los ejes y fuente
  geom_text(aes(label = ..count..), stat = "count", colour = "white", 
    vjust = 1.5, position = position_dodge(.9)) # agregamos freq de cada barra por grupo

```


### 2. Histogramas

Cuando tenemos variables con muchas categorías de respuesta, como las variables continuas u ordinales de más de 7 categorías, podemos usar histogramas para representar su distribución.

```{r eval=TRUE, warning=FALSE, include=TRUE, collapse=FALSE}

ggplot(data = proc_cep, 
       mapping = aes(x = edad)) + # especificamos datos y mapping 
  geom_histogram()# agregamos geometria 

ggplot(data = proc_cep, 
       mapping = aes(x = edad)) + # especificamos datos y mapping 
  geom_histogram(color = "black", fill = "#FA8072")  + # agregamos geometria y colores
  labs(title ="Histograma frecuencias abs: Edad", 
       x = "Edad", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente

```

```{r eval=TRUE, warning=FALSE, include=TRUE}

ggplot(data = proc_cep, 
       mapping = aes(x = satisfaccion)) + # especificamos datos y mapping 
  geom_histogram(color = "black", fill = "darkred")  + # agregamos geometria y colores
  labs(title ="Histograma frecuencias abs: Satisfaccion", 
       x = "Satisfaccion", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente


```

### 3. Digrama de densidad

Los diagramas de densidad son una forma más suavizada de observar la distribución de una variable, siendo comunmente utilizados para contrastar distribuciones empíricas con las teóricas.

```{r eval=TRUE, warning=FALSE, include=TRUE, collapse=FALSE}

ggplot(data = proc_cep, 
       mapping = aes(x = edad)) + # especificamos datos y mapping 
  geom_density(color = "black", fill = "#FA8072", alpha = 0.8)  + # agregamos geometria y colores
  labs(title ="Diagrama densidad: Edad", 
       x = "Edad", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente

ggplot(data = proc_cep, 
       mapping = aes(x = satisfaccion)) + # especificamos datos y mapping 
  geom_density(color = "black", fill = "darkred", alpha = 0.8)  + # agregamos geometria y colores
  labs(title ="Histograma densidad: Satisfaccion", 
       x = "Satisfaccion", 
       y = "Frecuencia",
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente


```


### 4. Gráficos de caja y bigote

Como vimos en clases, los graficos de cajas y bigotes nos sirven para observar la mediana de los datos, el Q1 y Q3, el IQR, los valores minimos y maximos, y los valores atípicos. 

```{r eval=TRUE, warning=FALSE, include=TRUE, collapse=FALSE}

ggplot(data = proc_cep, 
       mapping = aes(y = edad)) + # especificamos datos y mapping 
  geom_boxplot(fill = "darkblue", alpha = 0.8)  + # agregamos geometria y colores
  labs(title ="Gráfico de cajas: Edad", 
       y = "Edad", 
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente


ggplot(data = proc_cep, 
       mapping = aes(y = satisfaccion)) + # especificamos datos y mapping 
  geom_boxplot(fill = "darkred", alpha = 0.8)  + # agregamos geometria y colores
  labs(title ="Gráfico de cajas: Satisfaccion", 
       y = "Satisfaccion", 
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente


```

Ahora, segmentemos en un grafico de cajas la variable satisfaccion por tramo etario.

```{r eval=TRUE, warning=FALSE, include=TRUE}
ggplot(data = proc_cep, 
       mapping = aes(y = satisfaccion, fill = tramo_edad)) + # especificamos datos y mapping 
  geom_boxplot(alpha = 0.8)  + # agregamos geometria y colores
  labs(title ="Gráfico de cajas: Satisfaccion por tramo etario", 
       y = "Satisfaccion", 
       caption = "Fuente: Elaboración propia en base a Encuesta CEP Diciembre 2019.") # agregamos titulo, nombres a los ejes y fuente

```




